name: "Deploy - api-poi (.NET Core)"

# run on push to main branch
on:
  push:
    branches:
      - main
    paths:
      - "apis/poi/**"
  workflow_dispatch:

# Set envs
env:
  WORKDIR: "apis/poi/web"
  DOCKER_IMAGE_BASE_NAME: "devopsoh/api-poi"
  API_NAME: "poi"
  # RESOURCES_PREFIX: "devopsoh44707" # hardcoded or dynamic based on repo name

# Set defaults for GitHub Actions runner
defaults:
  run:
    working-directory: "apis/poi/web"

jobs:
  build:
    name: "Build"
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]
    outputs:
      RESOURCES_PREFIX: ${{ steps.inputdata.outputs.RESOURCES_PREFIX }}
      DOCKER_IMAGE_FULL_NAME: ${{ steps.dockerfullname.outputs.DOCKER_IMAGE_FULL_NAME }}
    steps:
      - uses: actions/checkout@v2

      #Initialize the CodeQL tools for scanning
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: ${{ matrix.language }}

      # Get RESOURCES_PREFIX based on the repo name
      - name: "Get Resources Prefix"
        run: |
          RESOURCES_PREFIX=$(echo '${{ toJson(github.repository) }}' | jq -r -c 'split("/")[1]')

          # Set for current Job
          echo "RESOURCES_PREFIX=${RESOURCES_PREFIX}" >> $GITHUB_ENV

          # Set for next Job
          echo "::set-output name=RESOURCES_PREFIX::${RESOURCES_PREFIX}"
        id: inputdata

      # AZURE CONTAINER REGISTRY
      - name: Get docker image full name
        run: |
          DOCKER_IMAGE_FULL_NAME=${{ env.RESOURCES_PREFIX }}cr.azurecr.io/${{ env.DOCKER_IMAGE_BASE_NAME }}

          # Set for current Job
          echo "DOCKER_IMAGE_FULL_NAME=${DOCKER_IMAGE_FULL_NAME}" >> ${GITHUB_ENV}

          # Set for next Job
          echo "::set-output name=DOCKER_IMAGE_FULL_NAME::${DOCKER_IMAGE_FULL_NAME}"
        id: dockerfullname

      - name: "Azure Login"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Build Docker image using Azure Container Registry"
        uses: Azure/cli@v1
        with:
          inlineScript: az acr build --image ${{ env.DOCKER_IMAGE_BASE_NAME }}:${{ github.run_id }} --registry ${{ env.RESOURCES_PREFIX }}cr.azurecr.io --build-arg build_version=${{ github.run_id }} --file ${{ env.WORKDIR }}/Dockerfile ${{ env.WORKDIR }}
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1 

      # # GITHUB PACKAGES CONTAINER REGISTRY
      # - name: Get docker image full name
      #   run: |
      #     # Repository name to lowercase - Docker registries accept only lowercase tag names
      #     REPOSITORY=${GITHUB_REPOSITORY,,}
      #     DOCKER_IMAGE_FULL_NAME=ghcr.io/${REPOSITORY}/${{ env.DOCKER_IMAGE_BASE_NAME }}

      #     # Set for current Job
      #     echo "DOCKER_IMAGE_FULL_NAME=${DOCKER_IMAGE_FULL_NAME}" >> ${GITHUB_ENV}

      #     # Set for next Job
      #     echo "::set-output name=DOCKER_IMAGE_FULL_NAME::${DOCKER_IMAGE_FULL_NAME}"
      #   id: dockerfullname

      # - name: Log in to ghcr.io
      #   uses: docker/login-action@v1
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Docker Metadata action
      #   uses: docker/metadata-action@v3
      #   with:
      #     images: ${{ env.DOCKER_IMAGE_FULL_NAME }}
      #     tags: |
      #       type=raw,value=${{ github.run_id }}
      #   id: metadata

      # - name: Build and push Docker image
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: ${{ env.WORKDIR }}
      #     file: ${{ env.WORKDIR }}/Dockerfile
      #     tags: ${{ steps.metadata.outputs.tags }}
      #     labels: ${{ steps.metadata.outputs.labels }}
      #     build-args: build_version=${{ github.run_id }}
      #     push: true

  production:
    name: "Production"
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: poi-production
      url: "${{ steps.deploy-to-webapp.outputs.webapp-url }}/api/version/${{ env.API_NAME }}"
    env:
      RESOURCES_PREFIX: ${{ needs.build.outputs.RESOURCES_PREFIX }}
      DOCKER_IMAGE_FULL_NAME: "${{ needs.build.outputs.DOCKER_IMAGE_FULL_NAME }}"
    steps:
      # Login to Azure with Service Principal
      - name: "Azure Login"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Set new Docker image in WebApp
      - name: Azure WebApp
        id: deploy-to-webapp
        uses: Azure/webapps-deploy@v2
        with:
          app-name: ${{ env.RESOURCES_PREFIX }}${{ env.API_NAME }}
          images: "${{ env.DOCKER_IMAGE_FULL_NAME }}:${{ github.run_id }}"